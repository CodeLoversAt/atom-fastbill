{"version":3,"sources":["controller/invoices.js"],"names":["require","module","exports","$scope","$log","FastBill","$filter","$state","invoicesLoaded","invoices","$apply","params","customerId","getInvoices","then","showHeader","model","currentPage","invoicesPerPage","startInvoice","endInvoice","invoicesPerPageOptions","$watch","values","debug","parseInt","i","Math","max","downloadInvoice","invoice","fileName","number","remote","win","getCurrentWindow","dialog","ipc","userHome","sendSync","test","console","log","navigator","language","showSaveDialog","defaultPath","title","path","request","fs","url","pipe","createWriteStream","turnOver","forEach","total"],"mappings":"CAAC,WACG,YAEcA,SAAQ,UAEtBC,QAAOC,SAAW,SAAU,OAAQ,WAAY,UAAW,SAAU,SAAUC,EAAQC,EAAMC,EAAUC,EAASC,GAC5G,QAASC,GAAgBC,GACrBN,EAAOO,OAAO,WACVP,EAAOM,SAAWA,IAGtBF,EAAOI,OAAOC,WACdP,EAASQ,YAAYN,EAAOI,OAAOC,YAAYE,KAAKN,GAEpDH,EAASQ,YAAY,MAAMC,KAAKN,GAEpCL,EAAOY,YAAcR,EAAOI,OAAOC,WAGnCT,EAAOa,OACHC,YAAa,EACbC,gBAAiB,GACjBC,aAAc,EACdC,WAAY,IAEhBjB,EAAOkB,wBAA0B,EAAG,EAAG,GAAI,GAAI,GAAI,IAEnDlB,EAAOmB,OAAO,4CAA6C,SAAUC,GACjEnB,EAAKoB,MAAM,wBAAyBD,EACpC,IAAIN,GAAcQ,SAASF,EAAO,GAAI,IAClCL,EAAkBO,SAASF,EAAO,GAAI,IACtCG,EAAIC,KAAKC,IAAI,EAAGX,EAAc,EAElCd,GAAOa,MAAMG,aAAeO,EAAIR,EAChCf,EAAOa,MAAMI,WAAajB,EAAOa,MAAMG,aAAeD,IAG1Df,EAAO0B,gBAAkB,SAAUC,GAC/B,GAAIC,GAAWzB,EAAQ,aAAa,qBAAuBwB,EAAQE,OAAS,OACxEC,EAASjC,QAAQ,UACjBkC,EAAMD,EAAOE,mBACbC,EAASH,EAAOjC,QAAQ,UACxBqC,EAAMrC,QAAQ,OACdsC,EAAWD,EAAIE,SAAS,gBAEvB,OAAMC,KAAKF,KACZA,GAAY,KAGhBG,QAAQC,IAAI,WAAYC,UAAUC,UAElCR,EAAOS,eAAeX,GAClBY,YAAaR,EAAWP,EACxBgB,MAAOzC,EAAQ,aAAa,sBAC7B,SAAU0C,GACT,GAAKA,EAAL,CAKA,GAAIC,GAAUhB,EAAOjC,QAAQ,WACzBkD,EAAKjB,EAAOjC,QAAQ,KAExBiD,GAAQnB,EAAQqB,KAAKC,KAAKF,EAAGG,kBAAkBL,QAIvD7C,EAAOmB,OAAO,WAAY,SAAUb,GAC3BA,IAGLN,EAAOmD,SAAW,EAElB7C,EAAS8C,QAAQ,SAAUzB,GACvB3B,EAAOmD,UAAYxB,EAAQ0B","file":"controller/invoices.js","sourcesContent":["(function () {\n    'use strict';\n\n    var angular = require('angular');\n\n    module.exports = ['$scope', '$log', 'FastBill', '$filter', '$state', function ($scope, $log, FastBill, $filter, $state) {\n        function invoicesLoaded (invoices) {\n            $scope.$apply(function () {\n                $scope.invoices = invoices;\n            });\n        }\n        if ($state.params.customerId) {\n            FastBill.getInvoices($state.params.customerId).then(invoicesLoaded);\n        } else {\n            FastBill.getInvoices(null).then(invoicesLoaded);\n        }\n        $scope.showHeader = !$state.params.customerId;\n\n        // pagination\n        $scope.model = {\n            currentPage: 1,\n            invoicesPerPage: 10,\n            startInvoice: 0,\n            endInvoice: 10\n        };\n        $scope.invoicesPerPageOptions = [1, 5, 10, 20, 25, 50];\n\n        $scope.$watch('[model.currentPage,model.invoicesPerPage]', function (values) {\n            $log.debug('[InvoicesCtrl] values', values);\n            var currentPage = parseInt(values[0], 10),\n                invoicesPerPage = parseInt(values[1], 10),\n                i = Math.max(0, currentPage - 1);\n\n            $scope.model.startInvoice = i * invoicesPerPage;\n            $scope.model.endInvoice = $scope.model.startInvoice + invoicesPerPage;\n        });\n\n        $scope.downloadInvoice = function (invoice) {\n            var fileName = $filter('translate')('INVOICE.FILE_NAME') + invoice.number + '.pdf',\n                remote = require('remote'),\n                win = remote.getCurrentWindow(),\n                dialog = remote.require('dialog'),\n                ipc = require('ipc'),\n                userHome = ipc.sendSync('get-user-home');\n\n            if (!/\\/$/.test(userHome)) {\n                userHome += '/';\n            }\n\n            console.log('language', navigator.language);\n\n            dialog.showSaveDialog(win, {\n                defaultPath: userHome + fileName,\n                title: $filter('translate')('INVOICE.SAVE_FILE')\n            }, function (path) {\n                if (!path) {\n                    // user cancelled\n                    return;\n                }\n\n                var request = remote.require('request'),\n                    fs = remote.require('fs');\n\n                request(invoice.url).pipe(fs.createWriteStream(path));\n            });\n        };\n\n        $scope.$watch('invoices', function (invoices) {\n            if (!invoices) {\n                return;\n            }\n            $scope.turnOver = 0;\n\n            invoices.forEach(function (invoice) {\n                $scope.turnOver += invoice.total;\n            });\n        });\n    }];\n}());\n"],"sourceRoot":"/source/"}