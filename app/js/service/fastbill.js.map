{"version":3,"names":[],"mappings":"","sources":["js/service/fastbill.js"],"sourcesContent":["import angular from 'angular';\nimport client from 'fastbill-client';\nimport Customer from '../model/customer';\nimport Invoice from '../model/invoice';\nimport Project from '../model/project';\n\nclass FastBill {\n    constructor($q, $rootScope, Storage, $log) {\n        \"use strict\";\n        this.client = client;\n\n        this.$q = $q;\n        this.$rootScope = $rootScope;\n        this.$log = $log;\n        this.authenticated = false;\n        this.storage = Storage;\n        this.initialize();\n    }\n\n    initialize() {\n        // check local storage\n        this.restoreState();\n    }\n\n    restoreState() {\n        var self = this,\n            serialized,\n            credentials;\n\n        try {\n            this.storage.get('_credentials', function (credentials) {\n                \"use strict\";\n                if (credentials) {\n                    self.deferred = self.$q.defer();\n\n                    // try to login\n                    self.login(credentials.username, credentials.apiKey)\n                        .then(function () {\n                            self.deferred.resolve(true);\n                            self.deferred = null;\n                        }, function () {\n                            self.deferred.resolve(false);\n                        });\n                }\n            });\n        } catch (e) {\n            this.$log.warn('[FastBill] error restoring state:', e);\n        }\n    }\n\n    saveState() {\n        try {\n            this.storage.set('_credentials', this.credentials);\n        } catch (e) {\n            this.$log.warn('[FastBill] error saving state:', e);\n        }\n    }\n\n    clearState() {\n        try {\n            delete localStorage._credentials;\n        } catch (e) {\n            this.$log.warn('[FastBill] error clearing state:', e);\n        }\n    }\n\n    ensureAuthenticated() {\n        if (!this.authenticated) {\n            throw 'You need to call login before accessing any api method';\n        }\n    }\n\n    login(username, apiKey) {\n        var deferred = this.$q.defer(),\n            self = this;\n        this.client.bootstrap(username, apiKey);\n\n        this.client.api.customer.get().then(function () {\n            self.$log.debug('[FastBill] login success');\n            self.authenticated = true;\n            self.credentials = {\n                username: username,\n                apiKey: apiKey\n            };\n            self.saveState();\n            self.$rootScope.$broadcast('authenticated');\n            deferred.resolve();\n        }, function (data) {\n            self.$log.warn('[FastBill] login failed', data);\n            self.$rootScope.$broadcast('not-authenticated');\n            deferred.reject();\n        });\n\n        return deferred.promise;\n    }\n\n    getCustomers() {\n        this.ensureAuthenticated();\n        return this.client.api.customer.get().then(function (data) {\n            var customers = [];\n\n            data.forEach(function (c) {\n                customers.push(new Customer(c));\n            });\n\n            return customers;\n        });\n    }\n\n    getCustomer(id) {\n        this.ensureAuthenticated();\n        return this.client.api.customer.getById(id).then(function (data) {\n            if (data && data.length) {\n                return new Customer(data[0]);\n            }\n\n            return null;\n        });\n    }\n\n    isAuthenticated() {\n        if (this.deferred) {\n            return this.deferred.promise;\n        }\n\n        var deferred = this.$q.defer();\n\n        deferred.resolve(this.authenticated);\n\n        return deferred.promise;\n    }\n\n    getInvoices(customerId) {\n        this.ensureAuthenticated();\n        this.$log.debug('[FastBill] getInvoices', customerId);\n        var invoicesHandler = function (data) {\n                var invoices = [];\n\n                data.forEach(function (i) {\n                    invoices.push(new Invoice(i));\n                });\n\n                return invoices;\n            };\n\n        if (customerId) {\n            return this.client.api.invoice.getByCustomerId(customerId).then(invoicesHandler);\n        } else {\n            return this.client.api.invoice.get().then(invoicesHandler);\n        }\n    }\n\n    getProjects(customerId) {\n        this.ensureAuthenticated();\n        var projectsHandler = function (data) {\n                var projects = [];\n\n                data.forEach(function (p) {\n                    projects.push(new Project(p));\n                });\n\n                return projects;\n            };\n\n        if (customerId) {\n            return this.client.api.project.getByCustomerId(customerId).then(projectsHandler);\n        }\n\n        return this.client.api.project.get().then(projectsHandler);\n    }\n\n    logout() {\n        this.authenticated = false;\n        this.credentials = null;\n        this.clearState();\n    }\n}\n\nexport default ['$q', '$rootScope', 'Storage', '$log', function ($q, $rootScope, Storage, $log) {\n    return new FastBill($q, $rootScope, Storage, $log);\n}];"],"file":"js/service/fastbill.js","sourceRoot":"/source/"}