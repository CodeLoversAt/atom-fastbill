{"version":3,"names":[],"mappings":"","sources":["js/service/storage.js"],"sourcesContent":["\"use strict\";\nexport default class Storage {\n    constructor() {\n        if ('object' === typeof chrome && 'object' === typeof chrome.storage) {\n            this.store = new ChromeLocalStorage();\n        } else {\n            this.store = new LocalStorage();\n        }\n    }\n\n    get(key, cb) {\n        this.store.get(key, cb);\n    }\n\n    set(key, cb) {\n        this.store.set(key, cb);\n    }\n\n    remove(key, cb) {\n        this.store.remove(key, cb);\n    }\n}\n\nclass ChromeLocalStorage {\n    get(key, cb) {\n        var result = null;\n        try {\n            chrome.storage.local.get(key, function (data) {\n                if (data && data.hasOwnProperty(key)) {\n                    result = data[key];\n                }\n                cb(result);\n            });\n        } catch (e) {\n            console.warn('error getting storage with key ' + key + ':', e);\n            cb(result);\n        }\n    }\n\n    set(key, value, cb) {\n        try {\n            var data = {};\n            data[key] = value;\n\n            chrome.storage.local.set(data, cb);\n        } catch (e) {\n            console.warn('error setting storage with key ' + key + ':', e);\n            cb();\n        }\n    }\n\n    remove(key, cb) {\n        try {\n            chrome.storage.local.remove(key, cb);\n        } catch (e) {\n            console.warn('error removing storage with key ' + key + ':', e);\n            cb();\n        }\n    }\n}\n\nclass LocalStorage {\n    get(key, cb) {\n        var result = null;\n        try {\n            var serialized = localStorage[key];\n\n            if (serialized) {\n                result = JSON.parse(serialized);\n            }\n        } catch (e) {\n            console.warn('error getting storage key ' + key + ':', e);\n            cb(null);\n        } finally {\n            cb(result);\n        }\n    }\n\n    set(key, value, cb) {\n        try {\n            localStorage[key] = JSON.stringify(value);\n        } catch (e) {\n            console.warn('error setting storage key ' + key + ':', e);\n        } finally {\n            cb();\n        }\n    }\n\n    remove(key, cb) {\n        try {\n            delete localStorage[key];\n        } catch (e) {\n            console.warn('error removing storage with key ' + key + ':', e);\n        } finally {\n            cb();\n        }\n    }\n}"],"file":"js/service/storage.js","sourceRoot":"/source/"}